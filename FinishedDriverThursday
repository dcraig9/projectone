/* SequenceTest.java
*  Driver file to test DoubleSequenceArray class
*  Created By Hussein Hamdan, Don Craig, Joe 
*
*
*
*
*
*/

import java.text.*;     //using for decimal formatting class
import java.util.*;     //using for scanner class  
     

class SequenceTest{ 



   public static void main(String[] args) {
   
   boolean done=false, valid=false;
   int menu=0, index = 0;
   double newData=0;
   DoubleArraySeq clone;
   DoubleArraySeq catSequence;
   DoubleArraySeq sequenceA = new DoubleArraySeq();
   DoubleArraySeq sequenceB = new DoubleArraySeq(5);
   Scanner scan = new Scanner(System.in);
   char active = 'A';
   for(int i = 1; i < 15; i++){
      sequenceA.addEnd(i);
      if(i%2 == 0){
         sequenceB.addEnd(i);
     }
   }
   
   do
   {
      printMenu();
      valid=false;
      while(!valid)
      {
         try
         {
            System.out.println();
            System.out.print("Choice: ");
            menu=scan.nextInt();
            if (menu<1 || menu>17) 
            {
               valid = false;
               throw new Exception("Choice must be from 1 to 17.");
            }
            else
            {
               valid = true;
            }
            
         }
         catch (InputMismatchException e) 
         {
            System.out.println("Invalid entry, must be an integer from 1 to 17.");
            scan.next();
         }
         catch (Exception e) {
            System.out.println(e.getMessage() );
         }
      }
      
      System.out.println();
      switch (menu)                       
      {
         case 1: //print seqA and seqB
                 System.out.print("Sequence A:"); 
                 System.out.println(sequenceA+ " ");
                 System.out.print("Sequence B:");
                 System.out.println(sequenceB+ " ");
                 break;
         case 2: System.out.println("SequenceA has a capacity of " + sequenceA.getCapacity() ); //print capacity of A & B
                 System.out.println("SequenceB has a capacity of " + sequenceB.getCapacity() );
                 break;
         case 3: 
                 if(sequenceA.equals(sequenceB))
                     System.out.println("Sequence A and B are equal");
                 else
                     System.out.println("Sequence A and B are not equal");
                 break;
         case 4: 
                 if (active=='A')          //change active sequence
                 {
                    active='B';
                    System.out.println("Active sequence is now B");
                 }
                 else
                 {
                    active='A';
                    System.out.println("Active sequence is now A");
                 }
                 break;
         case 5: 
                 newData=getNum();
                 if (active=='A')
                 {
                    sequenceA.addFront(newData);
                    System.out.print("Sequence A:"); 
                    System.out.println(sequenceA+ " ");
                 }
                 else
                 {
                    sequenceB.addFront(newData);
                    System.out.print("Sequence B:"); 
                    System.out.println(sequenceB+ " ");
                 }
                 break;
         case 6:
                 System.out.println("Please enter which number you would like to add before");
                 newData = getNum();
                 if(active == 'A'&& sequenceA.size() != 0)
                 {
                     index = search(sequenceA,newData);
                     if(index != -1)
                     {
                        System.out.println("Number found! Enter the number you would like to add before it");
                        newData = getNum();
                        sequenceA.setCurrent(index);
                        sequenceA.addBefore(newData);
                        System.out.println("Element Succesfully Added!\n" + "Sequence A: " + sequenceA);
                     }
                     else
                     {
                       System.out.println("Error! Number you wish to add before does not exist!");
                     }
                     
                 }
                 else if(active == 'B' && sequenceB.size() != 0)
                 {
                     index = search(sequenceB,newData);
                     if(index != -1)
                     {
                        System.out.println("Number found! Enter the number you would like to add before it");
                        newData = getNum();
                        sequenceB.setCurrent(index);
                        sequenceB.addBefore(newData);
                        System.out.println("Element Succesfully Added!\n" + "Sequence B: " + sequenceB);
                     }
                     else
                     {
                        System.out.println("Error! Number you wish to add before does not exist!");
                     }
                 }
                 else
                 {
                     System.out.println("Error! Current Active Sequence is empty, no element may be searched for!");
                     System.out.println("Use menu option 5 or 8 to begin to fill an empty sequence before attempting to use options 6 or 7!");         
                 }
                 break;
                 
         case 7:
                 System.out.println("Please enter which number you would like to add after");
                 newData = getNum();
                 
                 if(active == 'A'&& sequenceA.size() != 0)
                 {
                     index = search(sequenceA,newData);
                     if(index != -1)
                     {
                        System.out.println("Number found! Enter the number you would like to add after it");
                        newData = getNum();
                        sequenceA.setCurrent(index);
                        sequenceA.addAfter(newData);
                        System.out.println("Element Succesfully Added!\n" + "Sequence A: " + sequenceA);
                     }
                     else
                     {
                       System.out.println("Error! Number you wish to add before does not exist!");
                     }
                     
                 } 
                 else if(active == 'B' && sequenceB.size() != 0)
                 {
                     index = search(sequenceB,newData);
                     
                     if(index != -1)
                     {
                        System.out.println("Number found! Enter the number you would like to add after it");
                        newData = getNum();
                        sequenceB.setCurrent(index);
                        sequenceB.addAfter(newData);
                        System.out.println("Element Succesfully Added!\n" + "Sequence B: " + sequenceB);
                     }
                     else
                     {
                        System.out.println("Error! Number you wish to add after does not exist!");
                     }
                 }
                 
                 else
                 {
                     System.out.println("Error! Current Active Sequence is empty, no element may be searched for!");
                     System.out.println("Use menu option 5 or 8 to begin to fill an empty sequence before attempting to use options 6 or 7!");         
                 }
                   
                 break;
         case 8: 
                 newData=getNum();
                 
                 if (active=='A')
                 {
                    sequenceA.addEnd(newData);
                    System.out.print("Sequence A:"); 
                    System.out.println(sequenceA+ " ");
                 }
                 else
                 {
                    sequenceB.addEnd(newData);
                    System.out.print("Sequence B:"); 
                    System.out.println(sequenceB+ " ");
                 }
                 break;
         case 9:
                 sequenceA.addAll(sequenceB);
                 System.out.println("Sequence B succesfully added to the end of A!"); 
                 System.out.print("Sequence A:"); 
                 System.out.println(sequenceA+ " ");
                 break;
         case 10:
                 System.out.println("Which index position would you like to delete? If position in sequence is known, subtract one to get the index position");
                 index = (int) getNum();
                 if(active == 'A' && sequenceA.size() != 0)
                 {
                     if(index < sequenceA.size() && index >= 0)
                     {
                        System.out.println("Position found, deleting data...");
                        sequenceA.setCurrent(index);
                        sequenceA.removeCurrent();
                        System.out.println("Element at index position " + index + " successfully removed!");
                        System.out.println("Sequence A: " + sequenceA);
                     }
                     else
                     {
                        System.out.println("Error! Index position does not contain data or does not exist!");
                     }
                 }    
                 else if(active == 'B' && sequenceB.size() != 0)
                 {
                     if(index < sequenceB.size() && index >= 0)
                     {
                        System.out.println("Position found, deleting data...");
                        sequenceB.setCurrent(index);
                        sequenceB.removeCurrent();
                        System.out.println("Element at index position " + index + " successfully removed!");
                        System.out.println("Sequence B: " + sequenceB);
                     }
                     else
                     {
                        System.out.println("Error! Index position does not contain data or does not exist!");
                     }
                     
                 }
                 else
                     System.out.println("Error! Active Sequence is empty. Please fill the sequence before attempting to delete an element");
                       
                 break;
         case 11:
                  System.out.println("Deleting the first number from the sequence...");
                  if(active == 'A' && sequenceA.size() != 0)
                  {
                     sequenceA.removeFront();
                     System.out.println("Front number succesfully deleted!");
                     System.out.println("Sequence A: " + sequenceA);
                 }
                 else if(active == 'B' && sequenceB.size() != 0)
                 {
                     sequenceB.removeFront();
                     System.out.println("Front number succesfully deleted!");
                     System.out.println("Sequence B: " + sequenceB);
                 }
                 else
                     System.out.println("Error! Active Sequence is empty. Please fill the sequence before attempting to delete an element");
                  
                 break;
         case 12:
                 System.out.println("Please enter which index you wish to view, subtract one if you know the elements position in the sequence rather than its index");
                 index = (int) getNum();
                 if(active == 'A'&& newData <= sequenceA.size()-1)
                 {
                     sequenceA.setCurrent(index);
                     System.out.println("The element at index position " + index + " is " + sequenceA.getCurrent());
                 }     
                 else if(active == 'B' && index <= sequenceB.size()-1)
                 {
                     sequenceB.setCurrent(index);
                     System.out.println("The element at index position " + index + " is " + sequenceB.getCurrent());
                 }
                 else
                 {
                     System.out.println("Error, specified index position either does not exist or does not contain any data");
                 }   
                 break;
         case 13:
                 if(active == 'A')
                 {
                     sequenceA.setCurrentLast();
                     System.out.println("The last element in sequence A is " + sequenceA.getCurrent());
                 }
                 else
                 {
                     sequenceB.setCurrentLast();
                     System.out.println("The last element in sequence B is " + sequenceB.getCurrent());
                 }    
                 break;
         case 14: 
                  sequenceA.trimToSize();
                  sequenceB.trimToSize();
                  System.out.println("Excess memory trimmed from both sequences.");
                  break;
         case 15:
                  if(active == 'A' && sequenceA.size() != 0)
                  {
                     clone = sequenceA.clone();
                     System.out.println("Sequence A successfully cloned!\n" + "Clone Sequence: " + clone);
                  }
                  else if(active == 'B' && sequenceB.size() != 0)
                  {
                     clone = sequenceB.clone();
                     System.out.println("Sequence B successfully cloned! \n" + "Cloned Sequence: " + clone);
                  }
                  else
                  {
                     System.out.println("Error! Current sequence is empty, please enter data into the sequence to be cloned.");
                  }   
                 break;
         case 16:
                  System.out.println("Concatinating Sequence B onto Sequence A");
                  if((sequenceA.size()==0) || (sequenceB.size()==0))
                  {
                     System.out.println("Error! Cannot concatinate an empty sequence.");
                  }
                  else
                  {
                     catSequence = DoubleArraySeq.concatenation(sequenceA,sequenceB);
                     System.out.println("Concatinated Sequence: " + catSequence);
                 
                  }
                 break;
         case 17: done=true;
                  break;
      }
   }while(!done);
   

   
   
   } // end main method
   
   public static void printMenu()
   {
      //methods work, they just need to be checked and error catching added ( I may have missed an exception here and there)
      System.out.println(" 1: Print the sequences of A and B");                     //done
      System.out.println(" 2: Report the capacity of A and B");                     //done
      System.out.println(" 3: Report if A and B are equal");                        //done
      System.out.println(" 4: Change active sequence (default is A)");              //done
      System.out.println(" 5: Add a number to the front of a sequence");            //partial
      System.out.println(" 6: Add a number before a given number(user inputted)");  //done
      System.out.println(" 7: Add a number after a given number(user inputted)");   //done
      System.out.println(" 8: Add a number to the end of a sequence");              //partial
      System.out.println(" 9: Add sequence B to end of A");                         //done
      System.out.println("10: Delete a number at a certain index");                 //
      System.out.println("11: Delete the first number from the sequence");          //
      System.out.println("12: Display a number at a certain index");                //done
      System.out.println("13: Display the last element in the sequence");           //done
      System.out.println("14: Trim extra memory from both A and B");                //done
      System.out.println("15: Create a clone sequence and show");                   //done
      System.out.println("16: Create a new sequence using concatenate of B and A and show"); //done
      System.out.println("17: Quit");                                               //done
      
   }
   
   public static double getNum( )           // method to get a double as input
   {
      Scanner numScan = new Scanner(System.in);
      double input=0;
      boolean valid=false;
      while(!valid)
      {
         try
         {
            System.out.println();
            System.out.print("Enter a number: ");
            input=numScan.nextDouble();
            valid=true;
         }
         catch (InputMismatchException e) 
         {
            System.out.println("Invalid entry, must be a number.");
            numScan.next();
         }
      }
      return input;
   
   }
   
   
   public static int getInt( )           // method to get an integer as input
   {
      Scanner numScan = new Scanner(System.in);
      int input=0;
      boolean valid=false;
      while(!valid)
      {
         try
         {
            System.out.println();
            System.out.print("Enter an integer: ");
            input=numScan.nextInt();
            if (input<0) 
            {
               valid = false;
               throw new Exception("Value must be positive.");
            }
            else
            {
               valid = true;
            }
            
         }
         catch (InputMismatchException e) 
         {
            System.out.println("Invalid entry, must be an integer.");
            numScan.next();
         }
         catch (Exception e) {
            System.out.println(e.getMessage() );
         }
      }
      return input;
   
   }
   
   public static int search(DoubleArraySeq s1, double element){
      s1.start();
      int result = -1;
      for(int i = 0; i < s1.size(); i++)
      {
         if(s1.getCurrent() == element)
         {
            result = i;
            return result;
         }
         s1.advance();
      }
      return result;
   } 
   
} // end code
